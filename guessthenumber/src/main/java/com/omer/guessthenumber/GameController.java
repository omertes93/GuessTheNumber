package com.omer.guessthenumber;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class GameController {

	@Autowired
	private GameService gameService;

	/*
	 * WHEN STARTING NEW GAME CLIENT GETS NEW ID THAT GENERATED BY GameService AND
	 * ALSO GET NEW RANDOM NUMBER TO GUESS. THE GameService CREATE A NEW INSTANCE OF
	 * GAME OBJECT AND THE GamesServiceDao @REPOSITORY KEEP IT IN HASHMAP
	 */
	@PostMapping("/rest/api/game/newgame")
	public GeneralResponse createNewGame(@RequestBody String fullName) throws Throwable {
		try {
			return new GeneralResponse(gameService.addNewCurrentGame(fullName));
		} catch (Exception e) {
			return new GeneralResponse(e);
		}
	}

	/*
	 * WHEN A USER MAKES A GUESS AND SEND A REQUEST CECKING IF GAME IS OVER(COUNTER
	 * <=20) IF GAME IS NOT OVER CHECKING HOW MANY SCORES IF THERE IS A WIN THEN THE
	 * WIN FLAG IS TURNING ON TO TRUE THE ENTITYDAO CHECKING IF THE GAME IS BETWEEN
	 * THE 10 TOP SCORES THEN SAVING THE GAME
	 */
	@GetMapping("/rest/api/game/getuserguessscores/{id}/{guess}")
	public GeneralResponse checkNewGuess(@PathVariable("id") Long gameId, @PathVariable("guess") String guess)
			throws Throwable {
		try {
			return new GeneralResponse(gameService.checkNewGuess(gameId, guess));
			// for testing the exceptions
			// return new GeneralResponse(gameService.checkNewGuess(null, guess));
		} catch (Exception e) {
			return new GeneralResponse(e);

		}
	}

	/*
	 * THIS METHOD IS CALLED WHEN THE USER HAS A WIN AND THE GAME IS OVER - TO SHOW
	 * TOP 10 SCORES THAT ARE KEPT IN DB
	 */
	@GetMapping("/rest/api/game/all")
	public GeneralResponse getAll() {
		try {
			return new GeneralResponse(gameService.fetchAllGames());
		} catch (Exception e) {
			return new GeneralResponse(e);

		}
	}

	/*
	 * THIS METHOD DELETE ALL THE RECORDS IN TOP SCORES TABLE IF THE USER SEND THE
	 * CORRECT ADMIN PASSWORD
	 */

	@RequestMapping(value = "/rest/api/game/deletealltopscorestable{password}", method = RequestMethod.DELETE)
	public GeneralResponse deleteAllTopScores(@RequestParam("password") String password) {
		try {
			return new GeneralResponse(gameService.deleteAllTopScores(password));
		} catch (Exception e) {
			return new GeneralResponse(e);
		}
	}

	//////////////////////////////////////////////////////////////////////////
	// Saving new score to db - no need for game only for tests
	/*
	 * @PostMapping("/rest/api/game") public GeneralResponse addGame(@RequestBody
	 * TopScoresEntity newGame) { return new
	 * GeneralResponse(gameService.addCurrentTopScore(newGame));
	 * 
	 * }
	 */

}
